{'_display_decoder_result': DisplayFunctionItem(name='_display_decoder_result', fn_callable=<function DefaultDecoderDisplayFunctions._display_decoder_result at 0x00000270FAA00310>, is_global=False, short_name='decoder_result', docs=None),
 '_display_plot_decoded_epoch_slices': DisplayFunctionItem(name='_display_plot_decoded_epoch_slices', fn_callable=<function DefaultDecoderDisplayFunctions._display_plot_decoded_epoch_slices at 0x00000270FAA004C0>, is_global=False, short_name='decoded_epoch_slices', docs=" renders a plot with the 1D Marginals either (x and y position axes): the computed posterior for the position from the Bayesian decoder and overlays the animal's actual position over the top. \n        \n        TODO: This display function is currently atypically implemented as it performs computations as needed.\n\n        Depends on `_compute_specific_decoded_epochs` to compute the decoder for the epochs.\n        The final step, which is where most display functions start, is calling the actual plot function:\n            plot_decoded_epoch_slices(...)\n\n        Inputs:\n            most_likely_positions_mode: 'standard'|'corrected'\n        \n        \n        ax = destination_plot.ui.matplotlib_view_widget.ax,\n        variable_name = 'x',\n        \n        "),
 '_display_plot_marginal_1D_most_likely_position_comparisons': DisplayFunctionItem(name='_display_plot_marginal_1D_most_likely_position_comparisons', fn_callable=<function DefaultDecoderDisplayFunctions._display_plot_marginal_1D_most_likely_position_comparisons at 0x00000270FAA003A0>, is_global=False, short_name='marginal_1D_most_likely_pos_compare', docs=" renders a plot with the 1D Marginals either (x and y position axes): the computed posterior for the position from the Bayesian decoder and overlays the animal's actual position over the top. \n        \n        most_likely_positions_mode: 'standard'|'corrected'\n        posterior_name: 'p_x_given_n'|'p_x_given_n_and_x_prev'\n        \n        ax = destination_plot.ui.matplotlib_view_widget.ax,\n        variable_name = 'x',\n        \n        "),
 '_display_plot_most_likely_position_comparisons': DisplayFunctionItem(name='_display_plot_most_likely_position_comparisons', fn_callable=<function DefaultDecoderDisplayFunctions._display_plot_most_likely_position_comparisons at 0x00000270FAA00430>, is_global=False, short_name='plot_most_likely_position_compare', docs=" renders a 2D plot with separate subplots for the (x and y position axes): the computed posterior for the position from the Bayesian decoder and overlays the animal's actual position over the top. "),
 '_display_two_step_decoder_prediction_error_2D': DisplayFunctionItem(name='_display_two_step_decoder_prediction_error_2D', fn_callable=<function DefaultDecoderDisplayFunctions._display_two_step_decoder_prediction_error_2D at 0x00000270FA9FBEE0>, is_global=False, short_name='two_step_decoder_prediction_err_2D', docs=' Plots the prediction error for the two_step decoder at each point in time.\n                Based off of "_temp_debug_two_step_plots_animated_imshow"\n                \n                THIS ONE WORKS. \n            '),
 '_display_spike_rasters_pyqtplot_2D': DisplayFunctionItem(name='_display_spike_rasters_pyqtplot_2D', fn_callable=<function SpikeRastersDisplayFunctions._display_spike_rasters_pyqtplot_2D at 0x00000270FAA56040>, is_global=False, short_name='_display_spike_rasters_pyqtplot_2D', docs=' Plots a standalone 2D raster plot\n        '),
 '_display_spike_rasters_pyqtplot_3D': DisplayFunctionItem(name='_display_spike_rasters_pyqtplot_3D', fn_callable=<function SpikeRastersDisplayFunctions._display_spike_rasters_pyqtplot_3D at 0x00000270FAA560D0>, is_global=False, short_name='_display_spike_rasters_pyqtplot_3D', docs=' Plots a standalone 3D raster plot with independent/standalone controls built-in\n        '),
 '_display_spike_rasters_pyqtplot_3D_with_2D_controls': DisplayFunctionItem(name='_display_spike_rasters_pyqtplot_3D_with_2D_controls', fn_callable=<function SpikeRastersDisplayFunctions._display_spike_rasters_pyqtplot_3D_with_2D_controls at 0x00000270FAA561F0>, is_global=False, short_name='_display_spike_rasters_pyqtplot_3D_with_2D_controls', docs=' Plots a standalone 3D raster plot (via pyqtgraph) with a separate 2D raster plot as the window with which you can adjust the viewed window. \n        '),
 '_display_spike_rasters_vedo_3D': DisplayFunctionItem(name='_display_spike_rasters_vedo_3D', fn_callable=<function SpikeRastersDisplayFunctions._display_spike_rasters_vedo_3D at 0x00000270FAA56160>, is_global=False, short_name='_display_spike_rasters_vedo_3D', docs=' Plots a standalone 3D raster plot with independent/standalone controls built-in\n        '),
 '_display_spike_rasters_vedo_3D_with_2D_controls': DisplayFunctionItem(name='_display_spike_rasters_vedo_3D_with_2D_controls', fn_callable=<function SpikeRastersDisplayFunctions._display_spike_rasters_vedo_3D_with_2D_controls at 0x00000270FAA56280>, is_global=False, short_name='_display_spike_rasters_vedo_3D_with_2D_controls', docs=' Plots a standalone 3D raster plot (via Vedo) with a separate 2D raster plot as the window with which you can adjust the viewed window. \n        '),
 '_display_spike_rasters_window': DisplayFunctionItem(name='_display_spike_rasters_window', fn_callable=<function SpikeRastersDisplayFunctions._display_spike_rasters_window at 0x00000270FAA56310>, is_global=False, short_name='_display_spike_rasters_window', docs=' Displays a Spike3DRasterWindowWidget with a configurable set of raster widgets and controls in it.\n        \n        Uses:\n            computation_result.sess.spikes_df\n            \n        \n        '),
 '_display_directional_laps_overview': DisplayFunctionItem(name='_display_directional_laps_overview', fn_callable=<function DirectionalPlacefieldGlobalDisplayFunctions._display_directional_laps_overview at 0x00000270FBC7A040>, is_global=True, short_name='directional_laps_overview', docs=" Renders a window with the position/laps displayed in the middle and the four templates displayed to the left and right of them.\n\n            #TODO 2023-12-07 09:29: - [ ] This function's rasters have not been updated (as `_display_directional_template_debugger` on 2023-12-07) and when filtering the unit sort order and their labels will probably become incorrect.\n\n            "),
 '_display_directional_merged_pf_decoded_epochs': DisplayFunctionItem(name='_display_directional_merged_pf_decoded_epochs', fn_callable=<function DirectionalPlacefieldGlobalDisplayFunctions._display_directional_merged_pf_decoded_epochs at 0x00000270FBC7A310>, is_global=True, short_name='directional_merged_decoder_decoded_epochs', docs=' Renders to windows, one with the decoded laps and another with the decoded ripple posteriors, computed using the merged pseudo-2D decoder.\n\n            '),
 '_display_directional_merged_pf_decoded_epochs_marginals': DisplayFunctionItem(name='_display_directional_merged_pf_decoded_epochs_marginals', fn_callable=<function DirectionalPlacefieldGlobalDisplayFunctions._display_directional_merged_pf_decoded_epochs_marginals at 0x00000270FBC7A3A0>, is_global=True, short_name='directional_decoded_epochs_marginals', docs=' Plots two scatter plot figures of the decoded marginals from the merged decoder\n\n        '),
 '_display_directional_merged_pfs': DisplayFunctionItem(name='_display_directional_merged_pfs', fn_callable=<function DirectionalPlacefieldGlobalDisplayFunctions._display_directional_merged_pfs at 0x00000270FBC7A280>, is_global=True, short_name='directional_merged_pfs', docs=' Plots the merged pseduo-2D pfs/ratemaps. Plots: All-Directions, Long-Directional, Short-Directional in seperate windows. \n        \n        History: this is the Post 2022-10-22 display_all_pf_2D_pyqtgraph_binned_image_rendering-based method:\n        '),
 '_display_directional_template_debugger': DisplayFunctionItem(name='_display_directional_template_debugger', fn_callable=<function DirectionalPlacefieldGlobalDisplayFunctions._display_directional_template_debugger at 0x00000270FBC7A0D0>, is_global=True, short_name='directional_template_debugger', docs=" Renders a window with the four template heatmaps displayed to the left and right of center, and the ability to filter the actively included aclus via `included_any_context_neuron_ids`\n\n            enable_cell_colored_heatmap_rows: bool - uses the cell's characteristic assigned color to shade the 1D heatmap row value for that cell. NOTE: there are some perceptual non-uniformities with luminance how it is being applied now.\n\n            use_incremental_sorting: bool = False - incremental sorting refers to the method of sorting where plot A is sorted first, all of those cells retain their position for all subsequent plots, but the B-unique cells are sorted for B, ... and so on.\n                The alternative (use_incremental_sorting = False) is *individual* sorting, where each is sorted independently.\n\n            "),
 '_display_directional_track_remapping_diagram': DisplayFunctionItem(name='_display_directional_track_remapping_diagram', fn_callable=<function DirectionalPlacefieldGlobalDisplayFunctions._display_directional_track_remapping_diagram at 0x00000270FBC7A1F0>, is_global=True, short_name='track_remapping_diagram', docs=" For both directions, plots a subplot showing the cell's location on the long track and the short track with connecting arrows showing their transition. Draws both tracks in the background as reference. \n            "),
 '_display_directional_track_template_pf1Ds': DisplayFunctionItem(name='_display_directional_track_template_pf1Ds', fn_callable=<function DirectionalPlacefieldGlobalDisplayFunctions._display_directional_track_template_pf1Ds at 0x00000270FBC7A160>, is_global=True, short_name='directional_track_template_pf1Ds', docs=" Plots each template's pf1Ds side-by-side in four adjacent subplots. \n            Stack of line-curves style, not heatmap-style\n            "),
 '_display_rank_order_debugger': DisplayFunctionItem(name='_display_rank_order_debugger', fn_callable=<function RankOrderGlobalDisplayFunctions._display_rank_order_debugger at 0x00000270FBCB1AF0>, is_global=True, short_name='rank_order_debugger', docs='\n\n            '),
 '_display_rank_order_z_stats_results': DisplayFunctionItem(name='_display_rank_order_z_stats_results', fn_callable=<function RankOrderGlobalDisplayFunctions._display_rank_order_z_stats_results at 0x00000270FBCB1B80>, is_global=True, short_name='rank_order_z_stats', docs=' Plots the z-scores differences and their raw-values\n\n        '),
 '_display_1d_placefield_validations': DisplayFunctionItem(name='_display_1d_placefield_validations', fn_callable=<function DefaultDisplayFunctions._display_1d_placefield_validations at 0x00000270FE875790>, is_global=False, short_name='_display_1d_placefield_validations', docs=' Renders all of the flat 1D place cell validations with the yellow lines that trace across to their horizontally drawn placefield (rendered on the right of the plot) '),
 '_display_2d_placefield_result_plot_raw': DisplayFunctionItem(name='_display_2d_placefield_result_plot_raw', fn_callable=<function DefaultDisplayFunctions._display_2d_placefield_result_plot_raw at 0x00000270FE875820>, is_global=False, short_name='_display_2d_placefield_result_plot_raw', docs=' produces a stupid figure '),
 '_display_1d_placefield_occupancy': DisplayFunctionItem(name='_display_1d_placefield_occupancy', fn_callable=<function DefaultRatemapDisplayFunctions._display_1d_placefield_occupancy at 0x00000270FE884D30>, is_global=False, short_name='1d_placefield_occupancy', docs=' displays placefield occupancy in a MATPLOTLIB window \n        '),
 '_display_1d_placefields': DisplayFunctionItem(name='_display_1d_placefields', fn_callable=<function DefaultRatemapDisplayFunctions._display_1d_placefields at 0x00000270FE8840D0>, is_global=False, short_name='1d_placefields', docs=None),
 '_display_2d_placefield_occupancy': DisplayFunctionItem(name='_display_2d_placefield_occupancy', fn_callable=<function DefaultRatemapDisplayFunctions._display_2d_placefield_occupancy at 0x00000270FE884E50>, is_global=False, short_name='2d_placefield_occupancy', docs=' displays placefield occupancy in a MATPLOTLIB window \n        \n        Internally wraps `PfND.plot_ratemaps_2D` which itself wraps `neuropy.plotting.ratemaps.plot_ratemap_2D`\n        \n            optionally shows peak firing rates\n            \n        TODO: plot the information about the source of the data, such as the session information? Or perhaps we could just leave that encoded in the exported file name? It is hard to track the figures though\n        \n        '),
 '_display_2d_placefield_result_plot_ratemaps_2D': DisplayFunctionItem(name='_display_2d_placefield_result_plot_ratemaps_2D', fn_callable=<function DefaultRatemapDisplayFunctions._display_2d_placefield_result_plot_ratemaps_2D at 0x00000270FE884DC0>, is_global=False, short_name='2d_placefield_result_plot_ratemaps_2D', docs=' displays 2D placefields in a MATPLOTLIB window \n        \n        Internally wraps `PfND.plot_ratemaps_2D` which itself wraps `neuropy.plotting.ratemaps.plot_ratemap_2D`\n        \n            optionally shows peak firing rates\n            \n        TODO: plot the information about the source of the data, such as the session information? Or perhaps we could just leave that encoded in the exported file name? It is hard to track the figures though\n        \n        '),
 '_display_normal': DisplayFunctionItem(name='_display_normal', fn_callable=<function DefaultRatemapDisplayFunctions._display_normal at 0x00000270FE884EE0>, is_global=False, short_name='normal', docs="\n        \n        Internally wraps `neuropy.plotting.placemaps.plot_all_placefields` which itself wraps `PfND.plot_ratemaps_2D` which itself wraps `neuropy.plotting.ratemaps.plot_ratemap_2D`\n        \n        Usage:\n            _display_normal(curr_kdiba_pipeline.computation_results['maze1'], curr_kdiba_pipeline.active_configs['maze1'])\n        "),
 '_display_placemaps_pyqtplot_2D': DisplayFunctionItem(name='_display_placemaps_pyqtplot_2D', fn_callable=<function DefaultRatemapDisplayFunctions._display_placemaps_pyqtplot_2D at 0x00000270FE884F70>, is_global=False, short_name='placemaps_pyqtplot_2D', docs='  displays 2D placefields in a pyqtgraph window\n        '),
 '_display_recurrsive_latent_placefield_comparisons': DisplayFunctionItem(name='_display_recurrsive_latent_placefield_comparisons', fn_callable=<function DefaultRatemapDisplayFunctions._display_recurrsive_latent_placefield_comparisons at 0x00000270FE889040>, is_global=False, short_name='recurrsive_latent_placefield_comparisons', docs=" Create `master_dock_win` - centralized plot output window to collect individual figures/controls in (2022-08-18) \n            NOTE: Ignores `active_config` because context_nested_docks is for all contexts\n            \n            Usage:\n            \n                _out = curr_active_pipeline.display('_display_recurrsive_latent_placefield_comparisons', active_identifying_filtered_session_ctx)\n                master_dock_win = _out['master_dock_win']\n                curr_out_items = _out['out_items']\n\n            "),
 '_display_pf_peak_prominence2d_default_quadrant_plots': DisplayFunctionItem(name='_display_pf_peak_prominence2d_default_quadrant_plots', fn_callable=<function EloyAnalysisDisplayFunctions._display_pf_peak_prominence2d_default_quadrant_plots at 0x00000270FE8895E0>, is_global=False, short_name='peak_prominence2d_quadrant', docs=" Plots the 4-quadrant figure generated by default from peak_prominence2d to show the found prominence peaks\n            \n            WARNING 2024-01-31: Creates a TON (50+) figures\n            \n            Usage:\n                curr_display_function_name = '_display_pf_peak_prominence2d_default_quadrant_plots'\n                out_figs, out_axes, out_idxs = curr_active_pipeline.display(curr_display_function_name, active_config_name) \n                curr_display_function_name = 'plot_Prominence'\n                built_pdf_metadata, curr_pdf_save_path = _build_pdf_pages_output_info(curr_display_function_name)\n                with backend_pdf.PdfPages(curr_pdf_save_path, keep_empty=False, metadata=built_pdf_metadata) as pdf:\n                    for an_idx, a_fig in zip(active_peak_prominence_2d_results.neuron_extended_ids, out_figs):\n                        a_fig.suptitle(f'neuron: {an_idx.id}', fontsize=16)\n                        pdf.savefig(a_fig)\n            "),
 '_display_pf_peak_prominence2d_plots': DisplayFunctionItem(name='_display_pf_peak_prominence2d_plots', fn_callable=<function EloyAnalysisDisplayFunctions._display_pf_peak_prominence2d_plots at 0x00000270FE889700>, is_global=False, short_name='peak_prominence2d_quadrant', docs=" Plots a the custom placefield width/height results for each peak belonging to a single neuron/ratemap.\n                Uses the prominence2d results\n            Usage:\n                curr_display_function_name = '_display_pf_peak_prominence2d_plots'\n                figure, ax = curr_active_pipeline.display(curr_display_function_name, active_config_name, neuron_id=5) \n\n            "),
 '_display_speed_vs_PFoverlapDensity_plots': DisplayFunctionItem(name='_display_speed_vs_PFoverlapDensity_plots', fn_callable=<function EloyAnalysisDisplayFunctions._display_speed_vs_PFoverlapDensity_plots at 0x00000270FE889430>, is_global=False, short_name='_display_speed_vs_PFoverlapDensity_plots', docs=' Plot the 1D and 2D sorted avg_speed_per_pos and PFoverlapDensity to reveal any trends\n        '),
 '_display_3d_image_plotter': DisplayFunctionItem(name='_display_3d_image_plotter', fn_callable=<function Interactive3dDisplayFunctions._display_3d_image_plotter at 0x00000270FE9D6C10>, is_global=False, short_name='3d_image_plotter', docs=" Plots an existing image in a 3D environment\n        Inputs: {'extant_plotter': None} \n        Outputs: {'plotter'}\n        "),
 '_display_3d_interactive_custom_data_explorer': DisplayFunctionItem(name='_display_3d_interactive_custom_data_explorer', fn_callable=<function Interactive3dDisplayFunctions._display_3d_interactive_custom_data_explorer at 0x00000270FE9D6B80>, is_global=False, short_name='3d_interactive_custom_data_explorer', docs=" \n        Inputs: {'extant_plotter': None} \n        Outputs: {'iplapsDataExplorer', 'plotter'}\n        "),
 '_display_3d_interactive_spike_and_behavior_browser': DisplayFunctionItem(name='_display_3d_interactive_spike_and_behavior_browser', fn_callable=<function Interactive3dDisplayFunctions._display_3d_interactive_spike_and_behavior_browser at 0x00000270FE9D6AF0>, is_global=False, short_name='3d_interactive_spike_and_behavior_browser', docs=" \n        Inputs: {'extant_plotter': None} \n        Outputs: {'ipspikesDataExplorer', 'plotter'}\n\n        Usage:\n            t_start, t_delta, t_end = curr_active_pipeline.find_LongShortDelta_times()\n            active_config_modifiying_kwargs = {\n                'plotting_config': {'should_use_linear_track_geometry': True, \n                                    't_start': t_start, 't_delta': t_delta, 't_end': t_end,\n                                    }\n            }\n            _out_global = curr_active_pipeline.display(display_function='_display_3d_interactive_spike_and_behavior_browser', active_session_configuration_context=global_epoch_context,\n                                                        active_config_modifiying_kwargs=active_config_modifiying_kwargs,\n                                                        params_kwargs=dict(enable_historical_spikes=False, enable_recent_spikes=False, should_use_linear_track_geometry=True, **{'t_start': t_start, 't_delta': t_delta, 't_end': t_end}),\n                                                    )\n            ipspikesDataExplorer = _out_global['ipspikesDataExplorer']\n            p = _out_global['plotter']\n\n\n        "),
 '_display_3d_interactive_tuning_curves_plotter': DisplayFunctionItem(name='_display_3d_interactive_tuning_curves_plotter', fn_callable=<function Interactive3dDisplayFunctions._display_3d_interactive_tuning_curves_plotter at 0x00000270FE9D6A60>, is_global=False, short_name='3d_interactive_tuning_curves_plotter', docs=" Tuning Curves 3D Plot\n        Inputs: {'extant_plotter': None} \n        Outputs: {'ipcDataExplorer', 'plotter', 'pane'}\n        \n        Optional Keywords:\n            override_pf2D: the placefield PfND or PfND_TimeDependent object to use as the source data.\n        \n        "),
 'display_firing_rate_trends': DisplayFunctionItem(name='display_firing_rate_trends', fn_callable=<function FiringStatisticsDisplayFunctions.display_firing_rate_trends at 0x00000270FE9D6CA0>, is_global=False, short_name='display_firing_rate_trends', docs=" DOCTODO\n        \n        TODO: this sucks, it displays a beeswarm plot that locks everything up for minutes\n        \n        \n        Usage:\n        \n            # np.shape(active_one_step_decoder.active_time_windows) # (2892, 2)\n\n            active_firing_rate_trends = computation_result.computed_data['firing_rate_trends']\n\n            active_rolling_window_times = active_firing_rate_trends['active_rolling_window_times']\n            mean_firing_rates = active_firing_rate_trends['mean_firing_rates']\n            moving_mean_firing_rates_df = active_firing_rate_trends['moving_mean_firing_rates_df']\n            moving_mean_firing_rates_df # 3969 rows x 43 columns\n\n            # mean_firing_rates\n            # pg.plot(mean_firing_rates)\n\n            np.shape(moving_mean_firing_rates_df) # (3969, 43)\n            good_only_moving_mean_firing_rates_df = moving_mean_firing_rates_df.dropna() # 3910 rows x 43 columns\n            good_only_moving_mean_firing_rates_df.T\n            err, win = _display_firing_rate_trends(good_only_moving_mean_firing_rates_df.T)\n            win.show()\n\n            # active_rolling_window_times # dtype='timedelta64[ns]', name='time_delta_sec', length=2900, freq='S'\n            # pg.plot(moving_mean_firing_rates_df)\n\n        "),
 '_display_context_nested_docks': DisplayFunctionItem(name='_display_context_nested_docks', fn_callable=<function MultiContextComparingDisplayFunctions._display_context_nested_docks at 0x00000270FE9E3AF0>, is_global=True, short_name='context_nested_docks', docs=" Create `master_dock_win` - centralized plot output window to collect individual figures/controls in (2022-08-18)\n        NOTE: Ignores `active_config` because context_nested_docks is for all contexts\n\n        Input:\n            owning_pipeline_reference: A reference to the pipeline upon which this display function is being called\n\n        Usage:\n\n        display_output = active_display_output | curr_active_pipeline.display('_display_context_nested_docks', active_identifying_filtered_session_ctx, enable_gui=False, debug_print=False) # returns {'master_dock_win': master_dock_win, 'app': app, 'out_items': out_items}\n        master_dock_win = display_output['master_dock_win']\n        app = display_output['app']\n        out_items = display_output['out_items']\n\n        "),
 '_display_grid_bin_bounds_validation': DisplayFunctionItem(name='_display_grid_bin_bounds_validation', fn_callable=<function MultiContextComparingDisplayFunctions._display_grid_bin_bounds_validation at 0x00000270FE9E3A60>, is_global=True, short_name='grid_bin_bounds_validation', docs=' Renders a single figure that shows the 1D linearized position from several different sources to ensure sufficient overlap. Useful for validating that the grid_bin_bounds are chosen reasonably.\n\n        '),
 '_display_batch_pho_jonathan_replay_firing_rate_comparison': DisplayFunctionItem(name='_display_batch_pho_jonathan_replay_firing_rate_comparison', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_batch_pho_jonathan_replay_firing_rate_comparison at 0x00000270FE9EDB80>, is_global=True, short_name='batch_pho_jonathan_replay_firing_rate_comparison', docs=" Stacked Jonathan-style firing-rate-across-epochs-plot. Pho's batch adaptation of the primary elements from Jonathan's interactive display.\n                Usage:\n\n                    %matplotlib qt\n                    active_identifying_session_ctx = curr_active_pipeline.sess.get_context() # 'bapun_RatN_Day4_2019-10-15_11-30-06'\n\n                    graphics_output_dict = curr_active_pipeline.display('_display_batch_pho_jonathan_replay_firing_rate_comparison', active_identifying_session_ctx)\n                    fig, axs, plot_data = graphics_output_dict['fig'], graphics_output_dict['axs'], graphics_output_dict['plot_data']\n                    neuron_df, rdf, aclu_to_idx, irdf = plot_data['df'], plot_data['rdf'], plot_data['aclu_to_idx'], plot_data['irdf']\n                    # Grab the output axes:\n                    curr_axs_dict = axs[0]\n                    curr_firing_rate_ax, curr_lap_spikes_ax, curr_placefield_ax = curr_axs_dict['firing_rate'], curr_axs_dict['lap_spikes'], curr_axs_dict['placefield'] # Extract variables from the `curr_axs_dict` dictionary to the local workspace\n\n            "),
 '_display_jonathan_interactive_replay_firing_rate_comparison': DisplayFunctionItem(name='_display_jonathan_interactive_replay_firing_rate_comparison', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_jonathan_interactive_replay_firing_rate_comparison at 0x00000270FE9EDAF0>, is_global=True, short_name='jonathan_interactive_replay_firing_rate_comparison', docs=" Jonathan's interactive display. Currently hacked up to directly compute the results to display within this function\n                Internally calls `_make_jonathan_interactive_plot(...)`\n\n                Usage:\n                active_identifying_session_ctx = curr_active_pipeline.sess.get_context() # 'bapun_RatN_Day4_2019-10-15_11-30-06'\n                curr_active_pipeline.display('_display_jonathan_interactive_replay_firing_rate_comparison', active_identifying_session_ctx)\n\n            "),
 '_display_long_and_short_firing_rate_replays_v_laps': DisplayFunctionItem(name='_display_long_and_short_firing_rate_replays_v_laps', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_long_and_short_firing_rate_replays_v_laps at 0x00000270FE9EDE50>, is_global=True, short_name='long_and_short_firing_rate_replays_v_laps', docs=" Displays two figures, one for the long and one for the short track, that compare the firing rates during running (laps) and those during decoded replays.\n            Usage:\n            \n            \n            Option: this relies on the global result `jonathan_firing_rate_analysis_result.neuron_replay_stats_df`, but otherwise it could be made non-global as it does operate on separate epochs independently ('maze1', 'maze2').\n\n        "),
 '_display_long_and_short_stacked_epoch_slices': DisplayFunctionItem(name='_display_long_and_short_stacked_epoch_slices', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_long_and_short_stacked_epoch_slices at 0x00000270FEA0C040>, is_global=True, short_name='_display_long_and_short_stacked_epoch_slices', docs=' Plots two figures showing the entire stack of decoded epochs for both the long and short, including their Radon transformed lines if that information is available.\n\n        '),
 '_display_long_short_expected_v_observed_firing_rate': DisplayFunctionItem(name='_display_long_short_expected_v_observed_firing_rate', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_long_short_expected_v_observed_firing_rate at 0x00000270FE9EDF70>, is_global=True, short_name='long_short_expected_v_observed_firing_rate', docs=' Displays expected v observed firing rate for each cell independently\n\n        '),
 '_display_long_short_laps': DisplayFunctionItem(name='_display_long_short_laps', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_long_short_laps at 0x00000270FE9EDDC0>, is_global=True, short_name='_display_long_short_laps', docs=" Displays a figure displaying the 1D laps detected for both the long and short tracks.\n                Usage:\n\n                    %matplotlib qt\n                    active_identifying_session_ctx = curr_active_pipeline.sess.get_context() # 'bapun_RatN_Day4_2019-10-15_11-30-06'\n\n                    graphics_output_dict = curr_active_pipeline.display('_display_long_short_laps', active_identifying_session_ctx)\n                    fig, axs, plot_data = graphics_output_dict['fig'], graphics_output_dict['axs'], graphics_output_dict['plot_data']\n                    \n\n            "),
 '_display_long_short_pf1D_comparison': DisplayFunctionItem(name='_display_long_short_pf1D_comparison', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_long_short_pf1D_comparison at 0x00000270FE9EDC10>, is_global=True, short_name='short_long_pf1D_comparison', docs=" Displays a figure for comparing the 1D placefields across-epochs (between the short and long tracks). By default renders the second track's placefield flipped over the x-axis and hatched. \n                Usage:\n\n                    %matplotlib qt\n                    active_identifying_session_ctx = curr_active_pipeline.sess.get_context() # 'bapun_RatN_Day4_2019-10-15_11-30-06'\n\n                    graphics_output_dict = curr_active_pipeline.display('_display_long_short_pf1D_comparison', active_identifying_session_ctx)\n                    fig, axs, plot_data = graphics_output_dict['fig'], graphics_output_dict['axs'], graphics_output_dict['plot_data']\n                    \n\n            "),
 '_display_running_and_replay_speeds_over_time': DisplayFunctionItem(name='_display_running_and_replay_speeds_over_time', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_running_and_replay_speeds_over_time at 0x00000270FE9EDEE0>, is_global=True, short_name='running_and_replay_speeds_over_time', docs=" plots the animal's running speed and the decoded replay velocities (as computed by the Radon transform method) across the recording session. \n        Renders a vertical stack of two subplots.\n        \n        %matplotlib qt\n        _out = curr_active_pipeline.display('_display_running_and_replay_speeds_over_time', curr_active_pipeline.get_session_context())\n        _out\n        \n        TODO 2023-06-07 - Do I need to set up defer_render:bool=True for non-interactive plotting (like when writing to a file)?\n\n        "),
 '_display_short_long_firing_rate_index_comparison': DisplayFunctionItem(name='_display_short_long_firing_rate_index_comparison', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_short_long_firing_rate_index_comparison at 0x00000270FE9EDD30>, is_global=True, short_name='short_long_firing_rate_index_comparison', docs=" Displays a figure for comparing the 1D placefields across-epochs (between the short and long tracks)\n                Usage:\n\n                    %matplotlib qt\n                    active_identifying_session_ctx = curr_active_pipeline.sess.get_context() # 'bapun_RatN_Day4_2019-10-15_11-30-06'\n\n                    graphics_output_dict = curr_active_pipeline.display('_display_batch_pho_jonathan_replay_firing_rate_comparison', active_identifying_session_ctx)\n                    fig, axs, plot_data = graphics_output_dict['fig'], graphics_output_dict['axs'], graphics_output_dict['plot_data']\n                    neuron_df, rdf, aclu_to_idx, irdf = plot_data['df'], plot_data['rdf'], plot_data['aclu_to_idx'], plot_data['irdf']\n                    # Grab the output axes:\n                    curr_axs_dict = axs[0]\n                    curr_firing_rate_ax, curr_lap_spikes_ax, curr_placefield_ax = curr_axs_dict['firing_rate'], curr_axs_dict['lap_spikes'], curr_axs_dict['placefield'] # Extract variables from the `curr_axs_dict` dictionary to the local workspace\n\n            "),
 '_display_short_long_pf1D_scalar_overlap_comparison': DisplayFunctionItem(name='_display_short_long_pf1D_scalar_overlap_comparison', fn_callable=<function LongShortTrackComparingDisplayFunctions._display_short_long_pf1D_scalar_overlap_comparison at 0x00000270FE9EDCA0>, is_global=True, short_name='short_long_pf1D_scalar_overlap_comparison', docs=" Displays a figure for comparing the scalar comparison quantities computed for 1D placefields across-epochs (between the short and long tracks)\n                This currently renders as a colorful bar-graph with one bar for each aclu\n\n                Usage:\n\n                    %matplotlib qt\n                    active_identifying_session_ctx = curr_active_pipeline.sess.get_context() # 'bapun_RatN_Day4_2019-10-15_11-30-06'\n\n                    graphics_output_dict = curr_active_pipeline.display('_display_short_long_pf1D_scalar_overlap_comparison', active_identifying_session_ctx)\n                    fig, axs, plot_data = graphics_output_dict['fig'], graphics_output_dict['axs'], graphics_output_dict['plot_data']\n                    neuron_df, rdf, aclu_to_idx, irdf = plot_data['df'], plot_data['rdf'], plot_data['aclu_to_idx'], plot_data['irdf']\n                    # Grab the output axes:\n                    curr_axs_dict = axs[0]\n                    curr_firing_rate_ax, curr_lap_spikes_ax, curr_placefield_ax = curr_axs_dict['firing_rate'], curr_axs_dict['lap_spikes'], curr_axs_dict['placefield'] # Extract variables from the `curr_axs_dict` dictionary to the local workspace\n\n            ")}